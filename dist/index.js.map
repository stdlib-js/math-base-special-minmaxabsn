{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @private\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {Collection} out - output object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum absolute values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( -5.9, 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabsn( +0.0, -0.0, out, 1, 0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabsn( x, y, out, stride, offset ) {\n\tvar len;\n\tvar min;\n\tvar max;\n\tvar ax;\n\tvar ay;\n\tvar av;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\n\tout = arguments[ len - 3 ];\n\tstride = arguments[ len - 2 ];\n\toffset = arguments[ len - 1 ];\n\n\tif ( len === 3 ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = PINF;\n\t\treturn out;\n\t}\n\tif ( len === 4 ) {\n\t\tax = abs( x );\n\t\tout[ offset ] = ax;\n\t\tout[ offset + stride ] = ax;\n\t\treturn out;\n\t}\n\tif ( len === 5 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tax = abs( x );\n\t\tay = abs( y );\n\t\tif ( ax < ay ) {\n\t\t\tout[ offset ] = ax;\n\t\t\tout[ offset + stride ] = ay;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = ay;\n\t\tout[ offset + stride ] = ax;\n\t\treturn out;\n\t}\n\tmin = PINF;\n\tmax = 0.0;\n\tfor ( i = 0; i < len - 3; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) ) {\n\t\t\tout[ offset ] = NaN;\n\t\t\tout[ offset + stride ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tav = abs( v );\n\t\tif ( av < min ) {\n\t\t\tmin = av;\n\t\t}\n\t\tif ( av > max ) {\n\t\t\tmax = av;\n\t\t}\n\t}\n\tout[ offset ] = min;\n\tout[ offset + stride ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minmaxabsn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar compute = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {Array<number>} minimum and maximum absolute values\n*\n* @example\n* var v = minmaxabsn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxabsn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxabsn( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabsn() {\n\tvar args;\n\tvar i;\n\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\targs.push( [ 0.0, 0.0 ], 1, 0 );\n\treturn compute.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = minmaxabsn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum absolute values.\n*\n* @module @stdlib/math-base-special-minmaxabsn\n*\n* @example\n* var minmaxabsn = require( '@stdlib/math-base-special-minmaxabsn' );\n*\n* var v = minmaxabsn( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxabsn( -5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* v = minmaxabsn( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxabsn( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*\n* v = minmaxabsn( 3.14 );\n* // returns [ 3.14, 3.14 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar assign = require( './assign.js' );\nvar minmaxabsn = require( './main.js' );\n\n\n// MAIN //\n\nsetReadOnly( minmaxabsn, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = minmaxabsn;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAO,QAAS,gCAAiC,EAuCrD,SAASC,EAAYC,EAAGC,EAAGC,EAAKC,EAAQC,EAAS,CAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GANAP,EAAM,UAAU,OAEhBH,EAAM,UAAWG,EAAM,CAAE,EACzBF,EAAS,UAAWE,EAAM,CAAE,EAC5BD,EAAS,UAAWC,EAAM,CAAE,EAEvBA,IAAQ,EACZ,OAAAH,EAAKE,CAAO,EAAIN,EAChBI,EAAKE,EAASD,CAAO,EAAIL,EAClBI,EAER,GAAKG,IAAQ,EACZ,OAAAG,EAAKX,EAAKG,CAAE,EACZE,EAAKE,CAAO,EAAII,EAChBN,EAAKE,EAASD,CAAO,EAAIK,EAClBN,EAER,GAAKG,IAAQ,EACZ,OAAKT,EAAOI,CAAE,GAAKJ,EAAOK,CAAE,GAC3BC,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAASD,CAAO,EAAI,IAClBD,IAERM,EAAKX,EAAKG,CAAE,EACZS,EAAKZ,EAAKI,CAAE,EACPO,EAAKC,GACTP,EAAKE,CAAO,EAAII,EAChBN,EAAKE,EAASD,CAAO,EAAIM,EAClBP,IAERA,EAAKE,CAAO,EAAIK,EAChBP,EAAKE,EAASD,CAAO,EAAIK,EAClBN,IAIR,IAFAI,EAAMR,EACNS,EAAM,EACAK,EAAI,EAAGA,EAAIP,EAAM,EAAGO,IAAM,CAE/B,GADAD,EAAI,UAAWC,CAAE,EACZhB,EAAOe,CAAE,EACb,OAAAT,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAASD,CAAO,EAAI,IAClBD,EAERQ,EAAKb,EAAKc,CAAE,EACPD,EAAKJ,IACTA,EAAMI,GAEFA,EAAKH,IACTA,EAAMG,EAER,CACA,OAAAR,EAAKE,CAAO,EAAIE,EAChBJ,EAAKE,EAASD,CAAO,EAAII,EAClBL,CACR,CAKAP,EAAO,QAAUI,ICpIjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,IAyBd,SAASC,GAAa,CACrB,IAAIC,EACAC,EAGJ,IADAD,EAAO,CAAC,EACFC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAClCD,EAAK,KAAM,UAAWC,CAAE,CAAE,EAE3B,OAAAD,EAAK,KAAM,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,EACvBF,EAAQ,MAAO,KAAME,CAAK,CAClC,CAKAH,EAAO,QAAUE,IChBjB,IAAIG,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAa,IAKjBF,EAAaE,EAAY,SAAUD,CAAO,EAK1C,OAAO,QAAUC",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isnan", "abs", "PINF", "minmaxabsn", "x", "y", "out", "stride", "offset", "len", "min", "max", "ax", "ay", "av", "v", "i", "require_main", "__commonJSMin", "exports", "module", "compute", "minmaxabsn", "args", "i", "setReadOnly", "assign", "minmaxabsn"]
}
